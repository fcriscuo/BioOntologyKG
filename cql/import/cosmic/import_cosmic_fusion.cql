// CQL commands to import data from the Cosmic_Fusion TSV file

// n.b. Ths CQL should not be executed until the COSMIC Sample, COSMIC Classification and COSMIC Gene data
//      have been imported.


//Column Headings:
// COSMIC_SAMPLE_ID	SAMPLE_NAME	COSMIC_PHENOTYPE_ID	COSMIC_FUSION_ID
// FUSION_SYNTAX	FIVE_PRIME_CHROMOSOME	FIVE_PRIME_STRAND	FIVE_PRIME_TRANSCRIPT_ID
// FIVE_PRIME_GENE_SYMBOL	FIVE_PRIME_LAST_OBSERVE_EXON	FIVE_PRIME_GENOME_START_FROM
// FIVE_PRIME_GENOME_START_TO	FIVE_PRIME_GENOME_STOP_FROM	FIVE_PRIME_GENOME_STOP_TO
// THREE_PRIME_CHROMOSOME	THREE_PRIME_STRAND	THREE_PRIME_TRANSCRIPT_ID	THREE_PRIME_GENE_SYMBOL
// THREE_PRIME_FIRST_OBSERVE_EXON	THREE_PRIME_GENOME_START_FROM	THREE_PRIME_GENOME_START_TO
// THREE_PRIME_GENOME_STOP_FROM	THREE_PRIME_GENOME_STOP_TO	FUSION_TYPE	PUBMED_PMID

// Unique property: COSMIC_FUSION_ID

// Relationships:
// Cosmic_Sample - [HAS_FUSION_VARIANT] -> Cosmic Fusion
// Cosmic Fusion -[HAS_PUBLICATION] -> PubMedArticle
// Cosmic Fusion -[HAS_PHENOTYPE] -> CosmicClassification
// Cosmic Fusion (3')-[:HAS_THREE_PRIME_GENE] -> Cosmic Gene
// Cosmic Fusion (5')-[:HAS_FIVE_PRIME_GENE] -> Cosmic Gene
// Cosmic Gene (3') - [HAS_FIVE_PRIME_FUSION] -> Cosmic Gene (5')

// ================================
// STEP 1: Create Unique Constraint
// ================================
// Create a unique constraint on the COSMIC_FUSION_ID property.
CREATE CONSTRAINT cosmic_fusion_id_unique IF NOT EXISTS
FOR (n:COSMIC_Fusion) REQUIRE n.COSMIC_FUSION_ID IS UNIQUE;

// create indexes for node properties used in match or merge
CREATE INDEX gene_symbol_index FOR(n:COSMIC_GENE) ON n.GENE_SYMBOL;
CREATE INDEX fusion_three_prime_gene_symbol_index FOR(n:COSMIC_Fusion) ON n.THREE_PRIME_GENE_SYMBOL;
CREATE INDEX fusion_five_prime_gene_symbol_index FOR(n:COSMIC_Fusion) ON n.FIVE_PRIME_GENE_SYMBOL;
CREATE INDEX fusion_sample_id_index FOR (n:COSMIC_Fusion) ON n.COSMIC_SAMPLE_ID;
CREATE INDEX fusion_phenotype_id_index FOR (n:COSMIC_Fusion) ON n.COSMIC_PHENOTYPE_ID;
CREATE INDEX fusion_pubmed_id_index FOR (n:COSMIC_Fusion) ON n.PUBMED_PMID;

// ================================
// STEP 2: Delete COSMIC_Fusion nodes if necessary
// ================================
MATCH (n:COSMIC_Fusion)
CALL (n) {
    DETACH DELETE n
} IN TRANSACTIONS OF 1000 ROWS;

// ================================
// STEP 3: Import Fusion data from the TSV file
// ================================
LOAD CSV WITH HEADERS FROM 'file:///Volumes/SSD870/COSMIC_rel102/Import/Cosmic_Fusion_v102_GRCh38.tsv'
AS row
FIELDTERMINATOR '\t'

WITH row
WHERE row.COSMIC_FUSION_ID IS NOT NULL

CALL (row) {

MERGE (n:COSMIC_Fusion {COSMIC_FUSION_ID: TRIM(row.COSMIC_FUSION_ID)})
ON CREATE SET n.COSMIC_GENE_ID = TRIM(row.COSMIC_GENE_ID),
  n.SAMPLE_NAME = row.SAMPLE_NAME,
  n.COSMIC_SAMPLE_ID = TRIM(row.COSMIC_SAMPLE_ID),
  n.COSMIC_PHENOTYPE_ID = TRIM(row.COSMIC_PHENOTYPE_ID),
  n.PUBMED_PMID = TRIM(row.PUBMED_PMID),
  n.FUSION_SYNTAX = row.FUSION_SYNTAX,
  n.FIVE_PRIME_CHROMOSOME	 = TRIM(row.FIVE_PRIME_CHROMOSOME),
  n.FIVE_PRIME_STRAND	= row.FIVE_PRIME_STRAND,
  n.FIVE_PRIME_TRANSCRIPT_ID = TRIM(row.FIVE_PRIME_TRANSCRIPT_ID),
  n.FIVE_PRIME_GENE_SYMBOL	= TRIM(row.FIVE_PRIME_GENE_SYMBOL),
  n.FIVE_PRIME_LAST_OBSERVE_EXON	= row.FIVE_PRIME_LAST_OBSERVE_EXON,
  n.FIVE_PRIME_GENOME_START_FROM = toInteger(row.FIVE_PRIME_GENOME_START_FROM),
  n.FIVE_PRIME_GENOME_START_TO = toInteger(row.FIVE_PRIME_GENOME_START_TO),
  n.FIVE_PRIME_GENOME_STOP_FROM = toInteger(row.FIVE_PRIME_GENOME_STOP_FROM),
  n.FIVE_PRIME_GENOME_STOP_TO = toInteger(row.FIVE_PRIME_GENOME_STOP_TO),
  n.THREE_PRIME_CHROMOSOME	 = TRIM(row.THREE_PRIME_CHROMOSOME),
  n.THREE_PRIME_STRAND	= row.THREE_PRIME_STRAND,
  n.THREE_PRIME_TRANSCRIPT_ID = TRIM(row.THREE_PRIME_TRANSCRIPT_ID),
  n.THREE_PRIME_GENE_SYMBOL	= TRIM(row.THREE_PRIME_GENE_SYMBOL),
  n.THREE_PRIME_LAST_OBSERVE_EXON	= row.THREE_PRIME_LAST_OBSERVE_EXON,
  n.THREE_PRIME_GENOME_START_FROM = toInteger(row.THREE_PRIME_GENOME_START_FROM),
  n.THREE_PRIME_GENOME_START_TO = toInteger(row.THREE_PRIME_GENOME_START_TO),
  n.THREE_PRIME_GENOME_STOP_FROM = toInteger(row.THREE_PRIME_GENOME_STOP_FROM),
  n.THREE_PRIME_GENOME_STOP_TO = toInteger(row.THREE_PRIME_GENOME_STOP_TO),
  n.FUSION_TYPE = row.FUSUION_TYPE

// create relationships
// If PUBMED_PMID is not null, create a HAS_PUBLICATION relationship
WITH n, row
  // If PUBMED_PMID is not null, create a HAS_PUBLICATION relationship
  OPTIONAL MATCH (p:PubMedArticle {pubmed_id: TRIM(row.PUBMED_PMID)})
  WHERE row.PUBMED_PMID IS NOT NULL
  FOREACH (ignoreMe IN CASE WHEN p IS NOT NULL THEN [1] ELSE [] END |
    MERGE (n)-[:HAS_PUBLICATION]->(p)
  )
// Create a HAS_PHENOTYPE relationship
WITH n, row
  OPTIONAL MATCH (c:COSMIC_Classification {COSMIC_PHENOTYPE_ID: TRIM(row.COSMIC_PHENOTYPE_ID)})
  WHERE row.COSMIC_PHENOTYPE_ID IS NOT NULL
  FOREACH (ignoreMe IN CASE WHEN c IS NOT NULL THEN [1] ELSE [] END |
    MERGE (n)-[:HAS_PHENOTYPE]->(c)
  )
// Create a HAS_FUSION_VARIANT relationship from COSMIC_SAMPLE
WITH n, row
  OPTIONAL MATCH (s:COSMIC_Sample {COSMIC_SAMPLE_ID: TRIM(row.COSMIC_SAMPLE_ID)})
  WHERE row.COSMIC_SAMPLE_ID IS NOT null
  FOREACH (ignoreMe IN CASE WHEN s IS NOT NULL THEN [1] ELSE [] END |
    MERGE(s)-[:HAS_FUSION_VARIANT]->(n)
  )

// Cosmic Fusion (3')-[:HAS_THREE_PRIME_GENE] -> Cosmic Gene
WITH n,row
OPTIONAL MATCH (g:COSMIC_Gene {GENE_SYMBOL: TRIM(row.THREE_PRIME_GENE_SYMBOL)})
WHERE row.THREE_PRIME_GENE_SYMBOL IS NOT NULL
FOREACH (ignoreMe IN CASE WHEN g IS NOT NULL THEN [1] ELSE [] END |
 MERGE (n)-[:HAS_THREE_PRIME_GENE] ->(g)
)

// Cosmic Fusion (5')-[:HAS_FIVE_PRIME_GENE] -> Cosmic Gene
WITH n,row
OPTIONAL MATCH (g:COSMIC_Gene {GENE_SYMBOL: TRIM(row.FIVE_PRIME_GENE_SYMBOL)})
WHERE row.FIVE_PRIME_GENE_SYMBOL IS NOT NULL
FOREACH (ignoreMe IN CASE WHEN g IS NOT NULL THEN [1] ELSE [] END |
 MERGE (n)-[:HAS_FIVE_PRIME_GENE] ->(g)
)

// Cosmic Gene (3') - [HAS_FIVE_PRIME_FUSION_GENE] -> Cosmic Gene (5')
// Cosmic Gene (5') - [HAS_THREE_PRIME_FUSION_GENE] -> Cosmic Gene (3')
WITH n,row
 MATCH (g3:COSMIC_Gene {GENE_SYMBOL: TRIM(row.THREE_PRIME_GENE_SYMBOL)})
 MATCH (g5:COSMIC_Gene {GENE_SYMBOL: TRIM(row.FIVE_PRIME_GENE_SYMBOL)})
 MERGE (g3) -[:HAS_FIVE_PRIME_FUSION_GENE]->(g5)
 MERGE (g5) -[:HAS_THREE_PRIME_FUSION_GENE]->(g3)


} IN TRANSACTIONS OF 1000 ROWS;